{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#services-test","title":"services-test","text":"<p>This repository is used to test services and configurations. Nothing to see here.</p> <p>Documentation: https://afuetterer.github.io/services-test</p> <p>Source Code: https://github.com/afuetterer/services-test</p>"},{"location":"#requirements","title":"Requirements","text":"<p>Python 3.8+</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the terms of the MIT license.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>Available releases: https://github.com/afuetterer/services-test/releases</p>"},{"location":"cli/","title":"CLI Reference","text":""},{"location":"cli/#services-test","title":"services-test","text":"<p>services-test Command Line Interface.</p> <p>Usage:</p> <pre><code>services-test [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>-V</code>, <code>--version</code> boolean Show the version and exit. <code>False</code> <code>--install-completion</code> boolean Install completion for the current shell. None <code>--show-completion</code> boolean Show completion for the current shell, to copy it or customize the installation. None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#hello","title":"hello","text":"<p>Hello world command.</p> <p>Usage:</p> <pre><code>services-test hello [OPTIONS] MSG\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright \u00a9 2023 Heinz-Alexander Fuetterer</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"reference/","title":"Reference","text":"<p>services-test</p>"},{"location":"reference/cli/","title":"Cli","text":"<p>The Command Line Interface.</p>"},{"location":"reference/cli/#services_test.cli.cli","title":"<code>cli(version=typer.Option(False, '-V', '--version', callback=version_callback, is_eager=True, help='Show the version and exit.'))</code>","text":"<p>services-test Command Line Interface.</p> Source code in <code>services_test/cli.py</code> <pre><code>@app.callback(context_settings=CONTEXT_SETTINGS)\ndef cli(\n    version: bool = typer.Option(  # noqa: B008\n        False,\n        \"-V\",\n        \"--version\",\n        callback=version_callback,\n        is_eager=True,\n        help=\"Show the version and exit.\",\n    ),\n) -&gt; None:\n\"\"\"services-test Command Line Interface.\"\"\"\n</code></pre>"},{"location":"reference/cli/#services_test.cli.hello","title":"<code>hello(msg=typer.Argument(Ellipsis, help='The message.'))</code>","text":"<p>Hello world command.</p> Source code in <code>services_test/cli.py</code> <pre><code>@app.command()\ndef hello(msg: str = typer.Argument(..., help=\"The message.\")) -&gt; None:  # noqa: B008\n\"\"\"Hello world command.\"\"\"\n    typer.echo(hello_world(msg))\n</code></pre>"},{"location":"reference/lib/","title":"Lib","text":"<p>The functions in this project library.</p>"},{"location":"reference/lib/#services_test.lib.World","title":"<code>World</code>","text":"<p>Hello world.</p> Source code in <code>services_test/lib.py</code> <pre><code>class World:\n\"\"\"Hello world.\"\"\"\n\n    def send_message(self, msg: str) -&gt; str:\n\"\"\"Uppercases a message string.\n\n        The given message string will be uppercased and then returned.\n\n        Args:\n            msg: A message.\n\n        Returns:\n            An uppercase version of the input message.\n\n        \"\"\"\n        result = msg.upper()\n        return result\n</code></pre>"},{"location":"reference/lib/#services_test.lib.World.send_message","title":"<code>send_message(msg)</code>","text":"<p>Uppercases a message string.</p> <p>The given message string will be uppercased and then returned.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>str</code> <p>A message.</p> required <p>Returns:</p> Type Description <code>str</code> <p>An uppercase version of the input message.</p> Source code in <code>services_test/lib.py</code> <pre><code>def send_message(self, msg: str) -&gt; str:\n\"\"\"Uppercases a message string.\n\n    The given message string will be uppercased and then returned.\n\n    Args:\n        msg: A message.\n\n    Returns:\n        An uppercase version of the input message.\n\n    \"\"\"\n    result = msg.upper()\n    return result\n</code></pre>"},{"location":"reference/lib/#services_test.lib.hello_world","title":"<code>hello_world(msg)</code>","text":"<p>Uppercases a message string.</p> <p>The given message string will be uppercased and then returned.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>str</code> <p>A message.</p> required <p>Returns:</p> Type Description <code>str</code> <p>An uppercase version of the input message.</p> Source code in <code>services_test/lib.py</code> <pre><code>def hello_world(msg: str) -&gt; str:\n\"\"\"Uppercases a message string.\n\n    The given message string will be uppercased and then returned.\n\n    Args:\n        msg: A message.\n\n    Returns:\n        An uppercase version of the input message.\n\n    \"\"\"\n    result = msg.upper()\n    return result\n</code></pre>"}]}